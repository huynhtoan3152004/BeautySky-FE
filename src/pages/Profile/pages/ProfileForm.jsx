import React, { useState, useEffect } from "react";
import { Form, Input, Button, Typography, Card, message, Spin, Select } from "antd";
import { useAuth } from "../../../context/AuthContext";
import { useUsersContext } from "../../../context/UserContext";
import Swal from "sweetalert2"; // Import SweetAlert
import { EditOutlined, SaveOutlined, CloseOutlined } from "@ant-design/icons";
import { useNotifications } from "../../../context/NotificationContext";

const { Title } = Typography;

const ProfileForm = () => {
  const { user: authUser, updateAuthUser } = useAuth();
  const { users, fetchUsers, updateUser } = useUsersContext();
  const [currentUser, setCurrentUser] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [form] = Form.useForm();
  const [isLoading, setIsLoading] = useState(true);
  const { addNotification } = useNotifications();
  const [provinces, setProvinces] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [wards, setWards] = useState([]);
  const [selectedProvince, setSelectedProvince] = useState(null);
  const [selectedDistrict, setSelectedDistrict] = useState(null);
  const [loadingProvinces, setLoadingProvinces] = useState(false);
  const [loadingDistricts, setLoadingDistricts] = useState(false);
  const [loadingWards, setLoadingWards] = useState(false);
  const [fullAddress, setFullAddress] = useState("");

  useEffect(() => {
    const loadUsers = async () => {
      setIsLoading(true);
      await fetchUsers();
      setIsLoading(false);
    };

    if (users.length === 0) {
      loadUsers();
    } else {
      setIsLoading(false); // N·∫øu users ƒë√£ c√≥ s·∫µn th√¨ kh√¥ng c·∫ßn load l·∫°i
    }
  }, [fetchUsers, users.length]);

  useEffect(() => {
    if (authUser && users.length > 0) {
      const foundUser = users.find(
        (u) => u.email?.toLowerCase() === authUser.email?.toLowerCase()
      );

      // C·∫≠p nh·∫≠t form ch·ªâ khi c√≥ thay ƒë·ªïi user
      if (
        foundUser &&
        JSON.stringify(foundUser) !== JSON.stringify(currentUser)
      ) {
        setCurrentUser(foundUser);
        form.setFieldsValue(foundUser);
        setIsLoading(false);
      }
    }
  }, [authUser, users, form, currentUser]);

  useEffect(() => {
    const fetchProvinces = async () => {
      try {
        setLoadingProvinces(true);
        const response = await fetch("https://provinces.open-api.vn/api/p/");
        if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API t·ªânh th√†nh");
        }
        const data = await response.json();
        setProvinces(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch t·ªânh th√†nh:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh th√†nh");
      } finally {
        setLoadingProvinces(false);
      }
    };

    fetchProvinces();
  }, []);

  useEffect(() => {
    if (!selectedProvince) {
      setDistricts([]);
      return;
    }

    const fetchDistricts = async () => {
      try {
        setLoadingDistricts(true);
        const response = await fetch(`https://provinces.open-api.vn/api/p/${selectedProvince}?depth=2`);
        if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API qu·∫≠n huy·ªán");
        }
        const data = await response.json();
        setDistricts(data.districts || []);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch qu·∫≠n huy·ªán:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch qu·∫≠n huy·ªán");
        setDistricts([]);
      } finally {
        setLoadingDistricts(false);
      }
    };

    fetchDistricts();
  }, [selectedProvince]);

  useEffect(() => {
    if (!selectedDistrict) {
      setWards([]);
      return;
    }

    const fetchWards = async () => {
      try {
        setLoadingWards(true);
        const response = await fetch(`https://provinces.open-api.vn/api/d/${selectedDistrict}?depth=2`);
        if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API x√£ ph∆∞·ªùng");
        }
        const data = await response.json();
        setWards(data.wards || []);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch x√£ ph∆∞·ªùng:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch x√£ ph∆∞·ªùng");
        setWards([]);
      } finally {
        setLoadingWards(false);
      }
    };

    fetchWards();
  }, [selectedDistrict]);

  useEffect(() => {
    if (currentUser && users.length > 0) {
      const foundUser = users.find(
        (u) => u.email?.toLowerCase() === authUser.email?.toLowerCase()
      );

      if (
        foundUser &&
        JSON.stringify(foundUser) !== JSON.stringify(currentUser)
      ) {
        setCurrentUser(foundUser);
        form.setFieldsValue(foundUser);
        
        // N·∫øu c√≥ ƒë·ªãa ch·ªâ, ph√¢n t√≠ch th√†nh c√°c th√†nh ph·∫ßn
        if (foundUser.address) {
          setFullAddress(foundUser.address);
        }
        
        setIsLoading(false);
      }
    }
  }, [authUser, users, form, currentUser]);

  const handleEditClick = () => setIsEditing(true);
  const handleCancelClick = () => {
    setIsEditing(false);
    form.setFieldsValue(currentUser);
  };

  const handleProvinceChange = (value, option) => {
    setSelectedProvince(option.key);
    setSelectedDistrict(null);
    form.setFieldsValue({ district: undefined, ward: undefined });
    updateFullAddress(option.children, "", "");
  };

  const handleDistrictChange = (value, option) => {
    setSelectedDistrict(option.key);
    form.setFieldsValue({ ward: undefined });
    updateFullAddress(null, option.children, "");
  };

  const handleWardChange = (value, option) => {
    updateFullAddress(null, null, option.children);
  };

  const updateFullAddress = (province, district, ward) => {
    let newAddress = "";
    
    const currentProvince = province || form.getFieldValue("province");
    const currentDistrict = district || form.getFieldValue("district");
    const currentWard = ward || form.getFieldValue("ward");
    
    if (currentWard) newAddress += currentWard;
    if (currentDistrict) newAddress += newAddress ? `, ${currentDistrict}` : currentDistrict;
    if (currentProvince) newAddress += newAddress ? `, ${currentProvince}` : currentProvince;
    
    setFullAddress(newAddress);
    form.setFieldsValue({ address: newAddress });
  };

  const handleFormSubmit = async (values) => {
    try {
      // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
      const confirmResult = await Swal.fire({
        title: "X√°c nh·∫≠n thay ƒë·ªïi?",
        text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n?",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "ƒê·ªìng √Ω",
        cancelButtonText: "H·ªßy",
        reverseButtons: true,
      });

      if (confirmResult.isConfirmed) {
        // Hi·ªÉn th·ªã loading khi ƒëang x·ª≠ l√Ω
        Swal.fire({
          title: "Vui l√≤ng ch·ªù...",
          html: "ƒêang c·∫≠p nh·∫≠t th√¥ng tin",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        const payload = {
          userName: values.userName,
          fullName: values.fullName,
          email: values.email,
          phone: values.phone,
          address: values.address,
        };

        const apiResult = await updateUser(currentUser.userId, payload);

        if (apiResult?.success) {
          // ƒê√≥ng loading
          Swal.close();

          // Th√¥ng b√°o th√†nh c√¥ng
          await Swal.fire({
            title: "Th√†nh c√¥ng!",
            text: "Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
            icon: "success",
            confirmButtonColor: "#3085d6",
          });
          addNotification("B·∫°n ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng! üéâ");

          setCurrentUser((prev) => ({ ...prev, ...payload }));
          updateAuthUser({ ...authUser, ...payload });
          setIsEditing(false);
        } else {
          Swal.close();
          // Th√¥ng b√°o l·ªói t·ª´ server
          await Swal.fire({
            title: "L·ªói!",
            text: apiResult?.error?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
            icon: "error",
            confirmButtonColor: "#d33",
          });
        }
      }
    } catch (error) {
      Swal.close();
      console.error("Error:", error);
      // Th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh
      await Swal.fire({
        title: "L·ªói h·ªá th·ªëng!",
        text: "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën",
        icon: "error",
        confirmButtonColor: "#d33",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[50vh]">
        <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin..." />
      </div>
    );
  }

  if (!currentUser) {
    return (
      <div className="text-center text-gray-500">
        <p>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
        <Button type="primary" onClick={fetchUsers} className="mt-4">
          T·∫£i l·∫°i
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto mt-10 px-4 sm:px-6 lg:px-8">
      <Title
        level={3}
        className="text-center text-[#0272cd] font-bold mb-8 relative text-xl sm:text-2xl lg:text-3xl"
      >
        <span className="relative inline-block after:content-[''] after:absolute after:-bottom-2 after:left-0 after:w-full after:h-1 after:bg-[#6BBCFE] after:rounded-full">
          Th√¥ng Tin C√° Nh√¢n
        </span>
      </Title>

      <Card
        className="shadow-lg hover:shadow-xl transition-shadow duration-300 rounded-3xl sm:p-6 lg:p-8 p-4 border border-gray-200 bg-white overflow-hidden relative"
        style={{
          background: "linear-gradient(145deg, #ffffff 0%, #f8faff 100%)",
        }}
      >
        <div className="absolute top-0 right-0 w-32 h-32 bg-[#6BBCFE] opacity-10 rounded-full transform translate-x-16 -translate-y-16"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-[#0272cd] opacity-10 rounded-full transform -translate-x-12 translate-y-12"></div>

        <Form
          form={form}
          layout="vertical"
          onFinish={handleFormSubmit}
          className="bg-white/80 backdrop-blur-sm p-4 sm:p-6 lg:p-8 rounded-xl space-y-4 sm:space-y-6 relative z-10"
        >
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
            {/* Form Items v·ªõi styling m·ªõi */}
            <Form.Item
              label={
                <span className="text-gray-700 font-medium">T√™n t√†i kho·∫£n</span>
              }
              name="userName"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n!" },
              ]}
            >
              <Input
                disabled={!isEditing}
                className={`rounded-lg ${
                  !isEditing
                    ? "bg-gray-50"
                    : "hover:border-[#6BBCFE] focus:border-[#0272cd]"
                }`}
              />
            </Form.Item>

            {/* T√™n ng∆∞·ªùi d√πng */}
            <Form.Item
              label={
                <span className="text-gray-700 font-medium">
                  T√™n ng∆∞·ªùi d√πng
                </span>
              }
              name="fullName"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng!" },
              ]}
            >
              <Input
                disabled={!isEditing}
                className={`rounded-lg ${
                  !isEditing
                    ? "bg-gray-50"
                    : "hover:border-[#6BBCFE] focus:border-[#0272cd]"
                }`}
              />
            </Form.Item>

            {/* Email */}
            <Form.Item
              label={<span className="text-gray-700 font-medium">Email</span>}
              name="email"
              rules={[
                {
                  required: true,
                  type: "email",
                  message: "Email kh√¥ng h·ª£p l·ªá!",
                },
              ]}
            >
              <Input
                disabled={!isEditing}
                className={`rounded-lg ${
                  !isEditing
                    ? "bg-gray-50"
                    : "hover:border-[#6BBCFE] focus:border-[#0272cd]"
                }`}
              />
            </Form.Item>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <Form.Item
              label={
                <span className="text-gray-700 font-medium">S·ªë ƒëi·ªán tho·∫°i</span>
              }
              name="phone"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
              ]}
            >
              <Input
                disabled={!isEditing}
                className={`rounded-lg ${
                  !isEditing
                    ? "bg-gray-50"
                    : "hover:border-[#6BBCFE] focus:border-[#0272cd]"
                }`}
              />
            </Form.Item>

            {/* ƒê·ªãa ch·ªâ hi·ªán t·∫°i - Lu√¥n hi·ªÉn th·ªã */}
            <Form.Item
              label={<span className="text-gray-700 font-medium">ƒê·ªãa ch·ªâ hi·ªán t·∫°i</span>}
              name="address"
            >
              <Input
                disabled={true}
                className="rounded-lg bg-gray-50"
              />
            </Form.Item>

            {/* Ch·ªâ hi·ªÉn th·ªã c√°c tr∆∞·ªùng ƒë·ªãa ch·ªâ v√† ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß khi ƒëang ch·ªânh s·ª≠a */}
            {isEditing && (
              <>
                {/* T·ªânh/Th√†nh ph·ªë */}
                <Form.Item
                  label={<span className="text-gray-700 font-medium">T·ªânh/Th√†nh ph·ªë</span>}
                  name="province"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!" }]}
                >
                  <Select
                    placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë"
                    onChange={handleProvinceChange}
                    className="rounded-lg hover:border-[#6BBCFE] focus:border-[#0272cd]"
                    loading={loadingProvinces}
                    showSearch
                    optionFilterProp="children"
                  >
                    {provinces.map((province) => (
                      <Select.Option key={province.code} value={province.name}>
                        {province.name}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>

                {/* Qu·∫≠n/Huy·ªán */}
                <Form.Item
                  label={<span className="text-gray-700 font-medium">Qu·∫≠n/Huy·ªán</span>}
                  name="district"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán!" }]}
                >
                  <Select
                    disabled={!selectedProvince}
                    loading={loadingDistricts}
                    placeholder={selectedProvince ? "Ch·ªçn qu·∫≠n/huy·ªán" : "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë tr∆∞·ªõc"}
                    onChange={handleDistrictChange}
                    className="rounded-lg hover:border-[#6BBCFE] focus:border-[#0272cd]"
                    showSearch
                    optionFilterProp="children"
                  >
                    {districts.map((district) => (
                      <Select.Option key={district.code} value={district.name}>
                        {district.name}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>

                {/* X√£/Ph∆∞·ªùng */}
                <Form.Item
                  label={<span className="text-gray-700 font-medium">X√£/Ph∆∞·ªùng</span>}
                  name="ward"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn x√£/ph∆∞·ªùng!" }]}
                >
                  <Select
                    disabled={!selectedDistrict}
                    loading={loadingWards}
                    placeholder={selectedDistrict ? "Ch·ªçn x√£/ph∆∞·ªùng" : "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán tr∆∞·ªõc"}
                    onChange={handleWardChange}
                    className="rounded-lg hover:border-[#6BBCFE] focus:border-[#0272cd]"
                    showSearch
                    optionFilterProp="children"
                  >
                    {wards.map((ward) => (
                      <Select.Option key={ward.code} value={ward.name}>
                        {ward.name}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>

                {/* ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß - Ch·ªâ hi·ªÉn th·ªã khi ƒëang ch·ªânh s·ª≠a v√† ƒë√£ ch·ªçn ƒë·ªß th√¥ng tin */}
                {fullAddress && (
                  <Form.Item
                    label={<span className="text-gray-700 font-medium">ƒê·ªãa ch·ªâ m·ªõi</span>}
                    className="col-span-2"
                  >
                    <Input
                      disabled
                      value={fullAddress}
                      className="rounded-lg bg-gray-50 text-blue-600 font-medium"
                    />
                  </Form.Item>
                )}
              </>
            )}

            {/* Tr·∫°ng th√°i */}
            <Form.Item
              label={
                <span className="text-gray-700 font-medium">Tr·∫°ng th√°i</span>
              }
            >
              <Input
                disabled
                value={currentUser.isActive ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông"}
                className={`rounded-lg ${
                  currentUser.isActive
                    ? "text-green-600 bg-green-50 border-green-200"
                    : "text-red-600 bg-red-50 border-red-200"
                }`}
              />
            </Form.Item>
          </div>

          {/* Buttons v·ªõi responsive padding v√† margin */}
          <div className="flex flex-col sm:flex-row justify-end gap-3 sm:gap-4 mt-6 sm:mt-8">
            {!isEditing ? (
              <Button
                type="primary"
                onClick={handleEditClick}
                icon={<EditOutlined />}
                className="bg-gradient-to-r from-[#6BBCFE] to-[#0272cd] hover:from-[#0272cd] hover:to-[#025aa3] transition-all duration-300 text-base sm:text-lg font-semibold px-4 sm:px-8 py-3 sm:py-5 rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 w-full sm:w-auto"
              >
                Ch·ªânh s·ª≠a
              </Button>
            ) : (
              <>
                <Button
                  onClick={handleCancelClick}
                  icon={<CloseOutlined />}
                  className="border-gray-400 px-4 sm:px-8 py-3 text-gray-600 hover:bg-gray-100 transition-all duration-300 rounded-lg transform hover:-translate-y-0.5 w-full sm:w-auto order-2 sm:order-1"
                >
                  H·ªßy
                </Button>
                <Button
                  type="primary"
                  htmlType="submit"
                  icon={<SaveOutlined />}
                  className="bg-gradient-to-r from-[#6BBCFE] to-[#0272cd] hover:from-[#0272cd] hover:to-[#025aa3] text-white px-4 sm:px-8 py-3 font-semibold rounded-lg transition-all duration-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 w-full sm:w-auto order-1 sm:order-2"
                >
                  L∆∞u thay ƒë·ªïi
                </Button>
              </>
            )}
          </div>
        </Form>
      </Card>
    </div>
  );
};

export default ProfileForm;
