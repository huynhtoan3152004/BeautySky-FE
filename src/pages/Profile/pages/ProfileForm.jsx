import React, { useState, useEffect } from "react";
import { Form, Input, Button, Typography, Card, message, Spin } from "antd";
import { useAuth } from "../../../context/AuthContext";
import { useUsersContext } from "../../../context/UserContext";
import Swal from "sweetalert2"; // Import SweetAlert
import { EditOutlined, SaveOutlined, CloseOutlined } from "@ant-design/icons";
import { useNotifications } from "../../../context/NotificationContext";

const { Title } = Typography;

const ProfileForm = () => {
  const { user: authUser, updateAuthUser } = useAuth();
  const { users, fetchUsers, updateUser } = useUsersContext();
  const [currentUser, setCurrentUser] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [form] = Form.useForm();
  const [isLoading, setIsLoading] = useState(true);
  const { addNotification } = useNotifications();

  useEffect(() => {
    const loadUsers = async () => {
      setIsLoading(true);
      await fetchUsers();
      setIsLoading(false);
    };

    if (users.length === 0) {
      loadUsers();
    } else {
      setIsLoading(false); // N·∫øu users ƒë√£ c√≥ s·∫µn th√¨ kh√¥ng c·∫ßn load l·∫°i
    }
  }, [fetchUsers, users.length]);

  useEffect(() => {
    if (authUser && users.length > 0) {
      const foundUser = users.find(
        (u) => u.email?.toLowerCase() === authUser.email?.toLowerCase()
      );

      // C·∫≠p nh·∫≠t form ch·ªâ khi c√≥ thay ƒë·ªïi user
      if (
        foundUser &&
        JSON.stringify(foundUser) !== JSON.stringify(currentUser)
      ) {
        setCurrentUser(foundUser);
        form.setFieldsValue(foundUser);
        setIsLoading(false);
      }
    }
  }, [authUser, users, form, currentUser]);

  const handleEditClick = () => setIsEditing(true);
  const handleCancelClick = () => {
    setIsEditing(false);
    form.setFieldsValue(currentUser);
  };

  const handleFormSubmit = async (values) => {
    try {
      // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
      const confirmResult = await Swal.fire({
        title: "X√°c nh·∫≠n thay ƒë·ªïi?",
        text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n?",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "ƒê·ªìng √Ω",
        cancelButtonText: "H·ªßy",
        reverseButtons: true,
      });

      if (confirmResult.isConfirmed) {
        // Hi·ªÉn th·ªã loading khi ƒëang x·ª≠ l√Ω
        Swal.fire({
          title: "Vui l√≤ng ch·ªù...",
          html: "ƒêang c·∫≠p nh·∫≠t th√¥ng tin",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        const payload = {
          userName: values.userName,
          fullName: values.fullName,
          email: values.email,
          phone: values.phone,
          address: values.address,
        };

        const apiResult = await updateUser(currentUser.userId, payload);

        if (apiResult?.success) {
          // ƒê√≥ng loading
          Swal.close();

          // Th√¥ng b√°o th√†nh c√¥ng
          await Swal.fire({
            title: "Th√†nh c√¥ng!",
            text: "Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
            icon: "success",
            confirmButtonColor: "#3085d6",
          });
          addNotification("B·∫°n ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng! üéâ");

          setCurrentUser((prev) => ({ ...prev, ...payload }));
          updateAuthUser({ ...authUser, ...payload });
          setIsEditing(false);
        } else {
          Swal.close();
          // Th√¥ng b√°o l·ªói t·ª´ server
          await Swal.fire({
            title: "L·ªói!",
            text: apiResult?.error?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
            icon: "error",
            confirmButtonColor: "#d33",
          });
        }
      }
    } catch (error) {
      Swal.close();
      console.error("Error:", error);
      // Th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh
      await Swal.fire({
        title: "L·ªói h·ªá th·ªëng!",
        text: "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën",
        icon: "error",
        confirmButtonColor: "#d33",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[50vh]">
        <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin..." />
      </div>
    );
  }

  if (!currentUser) {
    return (
      <div className="text-center text-gray-500">
        <p>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
        <Button type="primary" onClick={fetchUsers} className="mt-4">
          T·∫£i l·∫°i
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto mt-10">
      <Title level={3} className="text-center text-[#0272cd] font-bold">
        Th√¥ng Tin C√° Nh√¢n
      </Title>

      <Card className="shadow-lg shadow-blue-300 rounded-3xl p-8 border border-gray-200 bg-white">
        <Form
          form={form}
          layout="vertical"
          // initialValues={currentUser} // Do not use initialValues here
          onFinish={handleFormSubmit}
          className="bg-white p-10 rounded-lg shadow-md shadow-gray-400  space-y-6"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* T√™n t√†i kho·∫£n */}
            <Form.Item
              label="T√™n t√†i kho·∫£n"
              name="userName"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n!" },
              ]}
            >
              <Input disabled={!isEditing} />
            </Form.Item>

            {/* T√™n ng∆∞·ªùi d√πng */}
            <Form.Item
              label="T√™n ng∆∞·ªùi d√πng"
              name="fullName"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng!" },
              ]}
            >
              <Input disabled={!isEditing} />
            </Form.Item>

            {/* Email */}
            <Form.Item
              label="Email"
              name="email"
              rules={[
                {
                  required: true,
                  type: "email",
                  message: "Email kh√¥ng h·ª£p l·ªá!",
                },
              ]}
            >
              <Input disabled={!isEditing} />
            </Form.Item>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <Form.Item
              label="S·ªë ƒëi·ªán tho·∫°i"
              name="phone"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
              ]}
            >
              <Input disabled={!isEditing} />
            </Form.Item>

            {/* ƒê·ªãa ch·ªâ */}
            <Form.Item label="ƒê·ªãa ch·ªâ" name="address">
              <Input disabled={!isEditing} />
            </Form.Item>

            {/* Tr·∫°ng th√°i */}
            <Form.Item label="Tr·∫°ng th√°i">
              <Input
                disabled
                value={currentUser.isActive ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông"}
                className={
                  currentUser.isActive ? "text-green-600" : "text-red-600"
                }
              />
            </Form.Item>
          </div>

          {/* Buttons */}
          <div className="flex justify-end gap-4">
            {!isEditing ? (
              <Button
                type="primary"
                onClick={handleEditClick}
                icon={<EditOutlined />}
                className="bg-[#6BBCFE] hover:bg-[#0272cd] transition-all text-lg font-semibold px-6 py-5 rounded-lg shadow-md"
              >
                Ch·ªânh s·ª≠a
              </Button>
            ) : (
              <>
                <Button
                  onClick={handleCancelClick}
                  icon={<CloseOutlined />}
                  className="border-gray-400 px-6 py-3 text-gray-600 hover:bg-gray-200 transition-all rounded-lg"
                >
                  H·ªßy
                </Button>
                <Button
                  type="primary"
                  htmlType="submit"
                  icon={<SaveOutlined />}
                  className="bg-[#6BBCFE] hover:bg-[#0272cd] text-white px-6 py-3 font-semibold rounded-lg transition-all shadow-md"
                >
                  L∆∞u thay ƒë·ªïi
                </Button>
              </>
            )}
          </div>
        </Form>
      </Card>
    </div>
  );
};

export default ProfileForm;
