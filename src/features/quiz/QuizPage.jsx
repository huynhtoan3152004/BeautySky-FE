import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "../../components/Navbar/Navbar";
import Footer from "../../components/Footer/Footer";

const questions = [
  {
    question: "Sau khi r·ª≠a m·∫∑t 30 ph√∫t, da b·∫°n c·∫£m th·∫•y th·∫ø n√†o?",
    options: [
      { text: "B√≥ng d·∫ßu ·ªü to√†n b·ªô m·∫∑t", type: "oily" },
      { text: "Ch·ªâ d·∫ßu v√πng ch·ªØ T, kh√¥ ·ªü m√°", type: "combination" },
      { text: "B√¨nh th∆∞·ªùng, kh√¥ng kh√¥ kh√¥ng d·∫ßu", type: "normal" },
      { text: "Kh√¥, cƒÉng, c√≥ th·ªÉ bong tr√≥c", type: "dry" },
      { text: "D·ªÖ ƒë·ªè, k√≠ch ·ª©ng ho·∫∑c ng·ª©a", type: "sensitive" },
    ],
  },
  {
    question: "B·∫°n c√≥ th∆∞·ªùng xuy√™n b·ªã m·ª•n kh√¥ng?",
    options: [
      { text: "R·∫•t d·ªÖ b·ªã m·ª•n ƒë·∫ßu ƒëen, ƒë·∫ßu tr·∫Øng", type: "oily" },
      { text: "Ch·ªâ m·ª•n ·ªü v√πng ch·ªØ T", type: "combination" },
      { text: "Th·ªânh tho·∫£ng b·ªã m·ª•n", type: "normal" },
      { text: "Hi·∫øm khi b·ªã m·ª•n", type: "dry" },
      { text: "Hay n·ªïi m·∫©n ƒë·ªè, k√≠ch ·ª©ng", type: "sensitive" },
    ],
  },
  {
    question: "L·ªó ch√¢n l√¥ng c·ªßa b·∫°n tr√¥ng th·∫ø n√†o?",
    options: [
      { text: "To, d·ªÖ th·∫•y tr√™n to√†n b·ªô m·∫∑t", type: "oily" },
      { text: "Nh·ªè ·ªü m√°, to h∆°n ·ªü v√πng ch·ªØ T", type: "combination" },
      { text: "Kh√¥ng qu√° l·ªõn c≈©ng kh√¥ng qu√° nh·ªè", type: "normal" },
      { text: "Nh·ªè, kh√≥ th·∫•y", type: "dry" },
      { text: "Da m·ªèng, d·ªÖ th·∫•y mao m·∫°ch", type: "sensitive" },
    ],
  },
  {
    question: "B·∫°n c√≥ c·∫£m gi√°c da b·ªã cƒÉng ho·∫∑c kh√≥ ch·ªãu sau khi r·ª≠a m·∫∑t kh√¥ng?",
    options: [
      { text: "Kh√¥ng, da t√¥i v·∫´n b√¨nh th∆∞·ªùng", type: "normal" },
      {
        text: "C√≥, v√πng ch·ªØ T c·∫£m gi√°c b√¨nh th∆∞·ªùng nh∆∞ng m√° h∆°i cƒÉng",
        type: "combination",
      },
      { text: "C√≥, da cƒÉng r√µ r·ªát v√† c√≥ th·ªÉ bong tr√≥c", type: "dry" },
      { text: "Kh√¥ng, nh∆∞ng sau ƒë√≥ nhanh ch√≥ng ƒë·ªï d·∫ßu", type: "oily" },
      { text: "Da h∆°i ƒë·ªè v√† r√°t sau khi r·ª≠a m·∫∑t", type: "sensitive" },
    ],
  },
  {
    question: "Khi s·ª≠ d·ª•ng m·ªπ ph·∫©m m·ªõi, da b·∫°n ph·∫£n ·ª©ng th·∫ø n√†o?",
    options: [
      { text: "Kh√¥ng c√≥ ph·∫£n ·ª©ng ƒë·∫∑c bi·ªát", type: "normal" },
      { text: "D·ªÖ n·ªïi m·ª•n ho·∫∑c b√≠t t·∫Øc l·ªó ch√¢n l√¥ng", type: "oily" },
      { text: "C√≥ th·ªÉ c√≥ m·ªôt s·ªë v√πng kh√¥ h∆°n b√¨nh th∆∞·ªùng", type: "dry" },
      { text: "D·ªÖ ƒë·ªè ho·∫∑c k√≠ch ·ª©ng khi ƒë·ªïi s·∫£n ph·∫©m", type: "sensitive" },
      {
        text: "Ch·ªâ ƒë√¥i khi c√≥ ch√∫t nh·ªùn ho·∫∑c kh√¥ ·ªü v√†i v√πng",
        type: "combination",
      },
    ],
  },
];

const skinTypeDescriptions = {
  oily: {
    name: "Da D·∫ßu",
    description:
      "Da b·∫°n ti·∫øt nhi·ªÅu d·∫ßu, d·ªÖ b·ªã m·ª•n. H√£y ch·ªçn s·∫£n ph·∫©m ki·ªÅm d·∫ßu v√† c·∫•p ·∫©m nh·∫π.",
  },
  combination: {
    name: "Da H·ªón H·ª£p",
    description:
      "Da b·∫°n d·∫ßu v√πng ch·ªØ T, kh√¥ v√πng m√°. C·∫ßn c√¢n b·∫±ng d·∫ßu v√† ƒë·ªô ·∫©m.",
  },
  normal: {
    name: "Da Th∆∞·ªùng",
    description:
      "Da b·∫°n c√¢n b·∫±ng, √≠t g·∫∑p v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ d√πng nhi·ªÅu lo·∫°i s·∫£n ph·∫©m.",
  },
  dry: {
    name: "Da Kh√¥",
    description:
      "Da b·∫°n thi·∫øu n∆∞·ªõc, d·ªÖ bong tr√≥c. H√£y ch·ªçn s·∫£n ph·∫©m d∆∞·ª°ng ·∫©m s√¢u.",
  },
  sensitive: {
    name: "Da Nh·∫°y C·∫£m",
    description:
      "Da b·∫°n d·ªÖ k√≠ch ·ª©ng. H√£y ch·ªçn s·∫£n ph·∫©m d·ªãu nh·∫π, kh√¥ng ch·ª©a h∆∞∆°ng li·ªáu.",
  },
};

const QuizPage = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [selectedOption, setSelectedOption] = useState(null);
  const [result, setResult] = useState(null);
  const navigate = useNavigate();

  const handleOptionClick = (option) => {
    setSelectedOption(option);
  };

  const handleNext = () => {
    if (selectedOption) {
      const updatedAnswers = [...answers];
      updatedAnswers[currentQuestion] = selectedOption.type;
      setAnswers(updatedAnswers);
      setSelectedOption(null);

      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        determineSkinType(updatedAnswers);
      }
    }
  };

  const handleBack = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedOption(
        questions[currentQuestion - 1].options.find(
          (option) => option.type === answers[currentQuestion - 1]
        ) || null
      );
    }
  };

  const determineSkinType = (answers) => {
    const typeCount = answers.reduce((acc, type) => {
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});

    const mostCommonType = Object.keys(typeCount).reduce((a, b) =>
      typeCount[a] > typeCount[b] ? a : b
    );

    setResult(skinTypeDescriptions[mostCommonType]);
  };

  return (
    <>
      <Navbar />
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-6">
        <h1 className="text-5xl font-bold text-[#6BBCFE] animate-pulse text-center mb-6">
          üîç Ki·ªÉm tra lo·∫°i da c·ªßa b·∫°n
        </h1>
        <div className="bg-white shadow-xl p-10 rounded-2xl w-full max-w-2xl text-center">
          {result ? (
            <div>
              <h2 className="text-3xl font-bold text-blue-600 animate-bounce">
                K·∫øt qu·∫£: {result.name}
              </h2>
              <p className="text-lg text-gray-700 my-6">{result.description}</p>
              <button
                className="mt-6 bg-gradient-to-r from-blue-400 to-blue-600 text-white py-3 px-8 rounded-xl font-semibold shadow-xl hover:scale-105 transition"
                onClick={() => navigate(`/routine-builder?type=${result.name}`)}
              >
                Xem l·ªô tr√¨nh chƒÉm s√≥c
              </button>
            </div>
          ) : (
            <div>
              <h2 className="text-2xl font-semibold text-blue-600">
                C√¢u h·ªèi {currentQuestion + 1}/{questions.length}
              </h2>
              <p className="text-xl mt-4">
                {questions[currentQuestion].question}
              </p>
              <div className="mt-6 space-y-4">
                {questions[currentQuestion].options.map((option, index) => (
                  <label
                    key={index}
                    className={`flex items-center justify-start space-x-4 cursor-pointer rounded-xl p-4 shadow-md transition ${
                      selectedOption?.text === option.text
                        ? "bg-[#6BBCFE] text-white scale-105"
                        : "bg-gray-100 hover:bg-blue-200"
                    }`}
                  >
                    <input
                      type="radio"
                      name="quiz"
                      value={option.text}
                      className="hidden"
                      checked={selectedOption?.text === option.text}
                      onChange={() => handleOptionClick(option)}
                    />
                    <div className="w-6 h-6 flex items-center justify-center border-2 border-blue-500 rounded-full">
                      {selectedOption?.text === option.text && (
                        <div className="w-4 h-4 bg-blue-500 rounded-full"></div>
                      )}
                    </div>
                    <span className="text-lg">{option.text}</span>
                  </label>
                ))}
              </div>
              <div className="mt-6 flex justify-between">
                <button
                  className={`bg-gray-400 text-white py-3 px-6 rounded-xl font-semibold shadow-xl transition ${
                    currentQuestion > 0
                      ? "hover:scale-105"
                      : "opacity-50 cursor-not-allowed"
                  }`}
                  onClick={handleBack}
                  disabled={currentQuestion === 0}
                >
                  Quay l·∫°i
                </button>
                <button
                  className={`bg-gradient-to-r from-blue-400 to-blue-600 text-white py-3 px-8 rounded-xl font-semibold shadow-xl transition ${
                    selectedOption
                      ? "hover:scale-105"
                      : "opacity-50 cursor-not-allowed"
                  }`}
                  onClick={handleNext}
                  disabled={!selectedOption}
                >
                  {currentQuestion < questions.length - 1
                    ? "Ti·∫øp theo"
                    : "Xem k·∫øt qu·∫£"}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default QuizPage;
